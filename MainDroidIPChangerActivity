@file:Suppress("DEPRECATION")

package com.app.droidipchanger.droidipchanger

import android.content.Context
import android.content.Intent
import android.net.ConnectivityManager
import android.net.Uri
import android.net.wifi.WifiManager
import android.os.AsyncTask
import android.os.Build
import android.os.Bundle
import android.provider.Settings
import android.support.annotation.RequiresApi
import android.support.v7.app.AppCompatActivity
import android.util.Log
import android.widget.ImageButton
import android.widget.MediaController
import android.widget.TextView
import android.widget.Toast
import kotlinx.android.synthetic.main.activity_intro.*
import java.lang.ref.WeakReference
import java.net.Inet4Address
import java.net.NetworkInterface
import java.net.SocketException

class Intro : AppCompatActivity() {

    lateinit var wifiManager: WifiManager
    lateinit var connectivityManager: ConnectivityManager
    lateinit var NewIp: TextView

    var myVariable = 10

    private var position = 0
    private var mediaController: MediaController? = null
    private var TAGs = "VideoPlayer"

    @RequiresApi(Build.VERSION_CODES.LOLLIPOP)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_intro)

        val MyIp = findViewById(R.id.MyIp) as TextView
        NewIp = findViewById(R.id.NewIp) as TextView
        val res = this.resources

        fun ipToString(i: Int): String {
            return (i and 0xFF).toString() + "." +
                    (i shr 8 and 0xFF) + "." +
                    (i shr 16 and 0xFF) + "." +
                    (i shr 24 and 0xFF)
        }

        wifiManager = this.applicationContext.getSystemService(Context.WIFI_SERVICE) as WifiManager
        if (wifiManager.isWifiEnabled == false) {
            MyIp.setText(res.getString(R.string.stringIPADDRESS, ipAddress7))
        }
        else {
            MyIp.setText(res.getString(R.string.WifiIPCannotBeChanged))
        }

        connectivityManager = this.applicationContext.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager
        if (wifiManager.isWifiEnabled == false) {
            if (connectivityManager.isDefaultNetworkActive == true) {

            }
        }

        introActivityVid.setMediaController(null)

        try {
            introActivityVid.setMediaController(mediaController)
            introActivityVid.setVideoURI(Uri.parse("android.resource://" + packageName + "/" + R.raw.introactivityvid))
        } catch (e: Exception) {
            Log.e ("Error", e.message)
        }

        introActivityVid.requestFocus()
        introActivityVid.setOnPreparedListener { mp ->
            mp.isLooping = true
            Log.i(TAGs, "Duration = " + introActivityVid.duration)
            introActivityVid.seekTo(position)
            if (position == 0) {
                introActivityVid.start()
            }
        }

        val helpButton : ImageButton = findViewById(R.id.about) as ImageButton
        helpButton.setOnClickListener {
            val intent = Intent( this, About::class.java)
            startActivity(intent)
        }
        val changeIpButton = findViewById(R.id.changeIP) as ImageButton
        changeIpButton.setOnClickListener {

            if (wifiManager.isWifiEnabled == false) {
                val task = arpScanTask(this)
                task.execute(25)

            }
        }
    }

    val ipAddress7: String
    get() {

        var ipaddress = ""
        try {
            val enumnet = NetworkInterface.getNetworkInterfaces()
            var netinterface: NetworkInterface
            while (enumnet.hasMoreElements()) {
                netinterface = enumnet.nextElement()
                val enumip = netinterface.inetAddresses
                while (enumip.hasMoreElements()) {
                    val inetAddress = enumip.nextElement()
                    if (inetAddress is Inet4Address)
                        if (!inetAddress.isLoopbackAddress) {

                        ipaddress = inetAddress.hostAddress

                        break
                        }
                    }
                }
            } catch (e: SocketException) {
                e.printStackTrace()
            }
        return ipaddress
    }



    class airplanemode(internal var context: Context){

        val isAirplaneMode: Boolean
            get() = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
                Settings.System.getInt(context.contentResolver, Settings.Global.AIRPLANE_MODE_ON, 0) != 0

            } else {
                Settings.System.getInt(context.contentResolver, Settings.System.AIRPLANE_MODE_ON, 0) != 0
            }

        fun toggleAirplaneMode(airplaneMode: Boolean) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
                val state = if (airplaneMode) 1 else 0
                Settings.System.putInt(context.contentResolver, Settings.Global.AIRPLANE_MODE_ON, state)

                val intent = Intent(Intent.ACTION_AIRPLANE_MODE_CHANGED)
                intent.putExtra("state", state)
                context.sendBroadcast(intent)
            }
        }
    }


    companion object {

        class arpScanTask internal constructor(context: Intro) : AsyncTask<Int, String, String?>() {

            private var resp: String? = null

            private val activityReference: WeakReference<Intro> = WeakReference(context)


            override fun onPreExecute() {
                val activity = activityReference.get()
                if (activity == null || activity.isFinishing) return
                activity.NewIp.text = "Searching for new data IP"
            }

            override fun doInBackground(vararg params: Int?): String? {

                val activity = activityReference.get()
                val res = activity!!.resources
                var airPlaneMode1 = airplanemode(activity)
                var aPM = airPlaneMode1.isAirplaneMode

                publishProgress("Search Started")
                try {

                    airPlaneMode1.isAirplaneMode
                    airPlaneMode1.toggleAirplaneMode(aPM)

                    val time = params[0]?.times(1000)
                    time?.toLong()?.let { Thread.sleep(it / 5) }
                    publishProgress("New IP found")
                    time?.toLong()?.let {Thread.sleep(it / 5) }
                    publishProgress("Connecting")
                    time?.toLong()?.let {Thread.sleep(it / 5) }
                    publishProgress("securing connection")
                    time?.toLong()?.let {Thread.sleep(it / 5) }
                    publishProgress("Connected")
                    resp = "IP change took " + params[0] + " seconds"

                    val subnet2 = res.getString(R.string.stringIPADDRESS, activity.ipAddress7)

                    publishProgress(subnet2.toString())
                    resp = subnet2.toString()


                } catch (e: InterruptedException) {
                    e.printStackTrace()
                    resp = e.message
                } catch (e: Exception) {
                    e.printStackTrace()
                    resp = e.message
                }
                return resp
            }

            override fun onProgressUpdate(vararg text: String?) {
                val activity = activityReference.get()
                if (activity == null || activity.isFinishing) return
                Toast.makeText(activity, text.firstOrNull(), Toast.LENGTH_SHORT).show()
            }

            override fun onPostExecute(result: String?) {

                val activity = activityReference.get()
                if (activity == null || activity.isFinishing) return
                activity.NewIp.text = result.let {it}
                activity.myVariable = 100

            }
        }
    }
}
